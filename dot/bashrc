# ~/.bashrc

[[ $- != *i* ]] && return

# functions
colors() {
    local fgc bgc vals seq0

    printf "Color escapes are %s\n" '\e[${value};...;${value}m'
    printf "Values 30..37 are \e[33mforeground colors\e[m\n"
    printf "Values 40..47 are \e[43mbackground colors\e[m\n"
    printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

    # foreground colors
    for fgc in {30..37}; do
        # background colors
        for bgc in {40..47}; do
            fgc=${fgc#37} # white
            bgc=${bgc#40} # black

            vals="${fgc:+$fgc;}${bgc}"
            vals=${vals%%;}

            seq0="${vals:+\e[${vals}m}"
            printf "  %-9s" "${seq0:-(default)}"
            printf " ${seq0}TEXT\e[m"
            printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
        done
        echo; echo
    done
}

ex() {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

let_git_echo() {
    last_pwd=$now_pwd;now_pwd=$(pwd)
    if [[ $now_pwd != $last_pwd ]]; then
        git_dir=`git rev-parse --git-dir 2> /dev/null`
    fi
    if [ -z "$git_dir" ] || [[ "$git_dir" == "." ]]; then
        git_echo=""
        return
    fi
    local branch="-$(git rev-parse --abbrev-ref HEAD)"
    local sha1=$(git rev-parse HEAD)
    if [[ -z $(git status --porcelain) ]]; then
        flag="✔ "
        local remote=$(git rev-parse @{u})
        if [[ -n $remote && $sha1 != $remote ]]; then
            flag="⌂ "
        fi
    else
        flag="✖ "
    fi
    sha1=${sha1:0:5}
    git_echo="$sha1$branch$flag"
}

check_status() {
    [[ $stflag == 0 ]] && echo 36 || echo 161
}

# autocomplete
[ -r /usr/share/bash-completion/bash_completion ] && . /usr/share/bash-completion/bash_completion
bind '"\e[Z":menu-complete'

# variable for function
last_pwd="-"
now_pwd="+"
git_dir=""
git_echo=""

# Set colorful PS1 only on colorful terminals.
# dircolors --print-database uses its own built-in database
# instead of using /etc/DIR_COLORS.  Try to use the external file
# first to take advantage of user additions.  Use internal bash
# globbing instead of external grep binary.
safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
match_lhs=""
[[ -f ~/.dir_colors   ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
[[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
[[ -z ${match_lhs}    ]] && type -P dircolors >/dev/null && match_lhs=$(dircolors --print-database)
[[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color=true

if ${use_color} ; then
    if type -P dircolors >/dev/null ; then
        if [[ -f ~/.dir_colors ]] ; then
            eval $(dircolors -b ~/.dir_colors)
        elif [[ -f /etc/DIR_COLORS ]] ; then
            eval $(dircolors -b /etc/DIR_COLORS)
        fi
    fi

    alias ls='ls --color=auto'
    alias grep='grep --colour=auto'
    alias egrep='egrep --colour=auto'
    alias fgrep='fgrep --colour=auto'

    [[ ${EUID} == 0 ]] && user='\[\e[38;5;226m\]▨ ' || user='\[\e[38;5;238m\]\u '
    PS1=" $user\[\e[38;5;109m\]\$git_echo\[\e[38;5;208m\]\W\[\e[38;5;\$(check_status)m\]❱ \[\e[0m\]"
    PROMPT_COMMAND='stflag=$?;let_git_echo'
else
    [[ ${EUID} == 0 ]] && user='▨ ' || user='\u '
    PS1=" $user\$(get_git)\W ❱ "
    PROMPT_COMMAND='let_git_echo'
fi

unset use_color safe_term match_lhs sh

alias ra=ranger
alias neofetch="neofetch --ascii ~/.config/neofetch/logo --ascii_colors 2 9 242 240 238 236"
alias bye="shutdown now"
alias scan="nmcli device wifi list"
alias connect="nmcli device wifi connect"
alias nv=nvim
alias pc=proxychains4
alias gk=". gk"

source ~/.profile
source ~/.localrc &> /dev/null

xhost +local:root > /dev/null 2>&1

shopt -s checkwinsize
shopt -s expand_aliases
shopt -s histappend
